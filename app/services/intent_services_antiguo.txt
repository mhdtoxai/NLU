"""
Servicio encargado de la clasificaci칩n de intenci칩n usando Saptiva.
"""
import json
import logging
from saptiva_agents.base import SaptivaAIChatCompletionClient
from saptiva_agents.models import UserMessage, SystemMessage
from ..config import MODEL, SAPTIVA_API_KEY
from ..prompts import build_prompt
from ..data.accionables import accionables
print("Utilizando el modelo: ", MODEL)
# Cliente de Saptiva
model_client = SaptivaAIChatCompletionClient(model=MODEL, api_key=SAPTIVA_API_KEY)

async def detect_intent_service(user: str, query: str) -> dict:
    """
    Detecta la intenci칩n del usuario a partir de su query.
    Retorna un diccionario con: from, mensaje y action.
    """
    messages = [
        SystemMessage(content=build_prompt()),
        UserMessage(content=query, source="user")
    ]

    result = await model_client.create(messages)
    raw = result.content.strip()

    # Intentar parsear JSON
    try:
        parsed = json.loads(raw)
    except Exception:
        logging.warning(f"Respuesta no JSON v치lida: {raw}")
        parsed = None

    return (
        {"from": user, "mensaje": parsed.get("mensaje"), "action": parsed.get("action")}
        if parsed and parsed.get("mensaje") and parsed.get("action")
        else {"from": user, "mensaje": accionables["pregunta_general"], "action": "pregunta_general"}
    )

